<template>
    <div class="menu-container">
        <div class="mg-b30">
            <el-button type="primary" class="button" :plain="true" @click="append">新增菜单</el-button>
        </div>
        <div class="menu-content">
            <!-- <div class="menu-content-left text-center">
                                        <h4>所有菜单</h4>
                                        <ul>
                                            <li v-for="item in rolesList" @click="selectRole(item.roleid)" class="pointer">{{item.rolename}}</li>
                                        </ul>
                                    </div> -->
            <div class="menu-content-right">
                <el-tabs type="border-card" :active-name="acyiveName">
                    <el-tab-pane label="菜单" name="menu"></el-tab-pane>
                    <el-tree ref="tree" :data="treeData" node-key="menuid" :default-expand-all="true" :props="defaultProps" :expand-on-click-node="false" :render-content="renderContent" :highlight-current="true">
                    </el-tree>
                </el-tabs>
            </div>

        </div>
        <el-dialog :title="dialogTitle" :visible.sync="dialogFormVisible">
            <el-form :model="form" :rules="rules">
                <el-form-item label="菜单名称" :label-width="formLabelWidth" prop="menuname">
                    <el-input v-model.trim="form.menuname" auto-complete="off" placeholder="请输入"></el-input>
                </el-form-item>
                <el-form-item label="菜单路径" :label-width="formLabelWidth" prop="menupath">
                    <el-input v-model="form.menupath" auto-complete="off" :debounce="0" placeholder="请输入菜单路径"></el-input>
                </el-form-item>
                <el-form-item label="顺序设置" :label-width="formLabelWidth" prop="orderindex">
                    <el-input-number v-model="form.orderindex" auto-complete="off" :debounce="0" placeholder="以数字顺序从小到大排序"></el-input-number>
                </el-form-item>
            </el-form>
            <div slot="footer" class="dialog-footer">
                <el-button @click="dialogFormVisible = false">取 消</el-button>
                <el-button type="primary" @click="addConfirm">确 定</el-button>
            </div>
        </el-dialog>
    </div>
</template>

<script>
export default {
    created() {
        this.$store.state.adminleftnavnum = '/Authority/menu'
        this.fetchdata()
    },
    data() {
        return {
            rolesList: [],
            treeData: [],
            acyiveName: 'menu',
            defaultProps: {
                children: 'childs',
                label: 'menuname'
            },
            dialogFormVisible: false,
            form: {
                menuname: '',
                orderindex: '',
                menupath: ''
            },
            formLabelWidth: '80px',
            dialogTitle: '',
            store: '',
            appendData: {},
            cacheData: {},
            rules: {
                menuname: [
                    { required: true, message: '请输入新增菜单名称', trigger: 'blur' }
                ],
                menupath: [
                    { required: true, message: '请输入菜单路径', trigger: 'blur' }
                ],
                orderindex: [
                    { type: 'number', required: true, message: '请设置顺序', trigger: 'change' }
                ]
            },
            exitMenu: []
        }
    },
    methods: {
        selectRole(id) {
            let param = { roleid: id }
            this.$api.Authority.getRolemenuByRoleid(param).then(res => {
                if (res.data.code == 200) {
                    let data = res.data.data
                    for (let i = 0; i < data.length; i++) {
                    }
                    this.treeData = data
                } else {
                    this.$util.isError(res.data)
                }
            })
        },
        renderContent(h, { node, data, store }) {
            return (
                <span>
                    <span>
                        <span>{node.label}</span>
                    </span>
                    <span style="float: right; margin-right: 20px">
                        <el-button size="small" on-click={() => this.append(store, data)}>添加</el-button>
                        <el-button size="small" on-click={() => this.amend(store, data)}>修改</el-button>
                        <el-button size="small" class="del" on-click={() => this.remove(store, data)}>删除</el-button>
                    </span>
                </span>)
        },
        addConfirm() {
            // for (let i = 0; i < this.exitMenu.length; i++) {
            //     if (this.exitMenu[i] == this.form.menuname) {
            //         this.$message.error('该菜单已存在,请重新输入')
            //        return
            //     }
            // }

            if (this.dialogTitle == '添加菜单') {
                let obj = {
                    menuname: this.form.menuname,
                    parentmenuid: this.cacheData && this.cacheData.menuid || 0,
                    orderindex: this.form.orderindex,
                    menupath: this.form.menupath
                }
                this.$api.Authority.add(obj).then(res => {
                    if (res.data.code == 200) {
                        this.fetchdata()
                        this.$refs.tree.store.append(obj, this.cacheData)
                        this.$message.success('添加成功')
                    } else {
                        this.$util.isError(res.data)
                    }
                })
            }

            if (this.dialogTitle == '修改菜单') {
                let obj = {
                    menuname: this.form.menuname,
                    parentmenuid: this.cacheData.parentmenuid,
                    menuid: this.cacheData.menuid,
                    menupath: this.form.menupath
                }
                this.$api.Authority.edit(obj).then(res => {
                    if (res.data.code == 200) {
                        this.fetchdata()
                        this.$message.success('修改成功')
                    } else {
                        this.$util.isError(res.data)
                    }
                })
            }
            this.dialogFormVisible = false
        },
        append(store, data) {
            this.dialogFormVisible = true
            this.dialogTitle = '添加菜单'
            this.cacheData = data
        },
        amend(store, data) {
            this.dialogFormVisible = true
            this.dialogTitle = '修改菜单'
            this.cacheData = data
            this.form.menuname = data.menuname
            this.form.menupath = data.menupath
            this.form.orderindex = data.orderindex
        },
        remove(store, data) {
            this.$confirm('确定删除该菜单?', '提示', {
                confirmButtonText: '确定',
                cancelButtonText: '取消'
            }).then(() => {
                let param = { menuid: data.menuid }
                this.$api.Authority.del(param).then(res => {
                    if (res.data.code == 200) {
                        this.$refs.tree.store.remove(data)
                        this.$message.success('删除成功')
                    } else {
                        this.$util.isError(res.data)
                    }
                })
            }).catch(() => {
            })
        },
        fetchdata() {
            this.$api.Authority.getTree().then(res => {
                if (res.data.code == 200) {
                    this.treeData = res.data.data
                    // const s = new Set()
                    // this.treeData.forEach(x => s.add(x.menuname))
                    // this.exitMenu = [...s]
                } else {
                    this.$util.isError(res.data)
                }
            })
        }
    }

}
</script>

<style lang="stylus">
   .menu-container
      padding: 40px 30px
      .el-dialog--small      
         max-width: 620px
   .menu-content   
      display: table
      width: 100%
      min-height: 600px
      border: 1px solid #e5e5e5
   .menu-content-left
       display: table-cell
       vertical-align: top 
       width: 20%
       border-right: 1px solid #e5e5e5
       h4
          height: 40px
          line-height: 40px
          border-bottom: 1px solid #e5e5e5
          background-color: #eef1f6
       li
          height: 30px
          line-height: 30px
          &:hover
            color: #2c3e50
            background-color: #e4e8f1
      li.active     
           color: #fff
           background-color: #20a0ff
   .menu-content-right     
       display: table-cell 
       max-width: 1000px
       .el-tree
          border: none
       .el-tabs--border-card   
          border: none
          box-shadow: none
       .el-tabs__header   
          border: none
       .el-button.del:hover      
            color: #FF4949
            border-color: #ff4949
</style>