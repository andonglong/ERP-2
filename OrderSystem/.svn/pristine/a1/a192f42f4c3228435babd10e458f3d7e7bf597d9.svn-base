<template>
  <div>
    <el-row :gutter="20">
        <el-col :span="8">
           <div class="grid-content bg-purple">
              <el-input v-model="inputVal" placeholder="请输入内容" icon="search" @keydown="a()" :on-icon-click="SearchIconClick"></el-input>
           </div>
       </el-col>

        <el-col :span="2">
           <div class="grid-content bg-purple">
               <el-button @click="Search()">查询</el-button>
           </div>
       </el-col>
    </el-row>
    
    <el-button @click="dialogFormVisible = true" >新增</el-button>

    <el-table ref="multipleTable" :data="tableData3" border tooltip-effect="dark" style="width: 100%" @selection-change="handleSelectionChange">
        <el-table-column type="selection" width="55">
        </el-table-column>

        <el-table-column label="序号" width="120">
          <template scope="scope">{{ scope.row.employeeid }}</template>
        </el-table-column>
     
       <el-table-column prop="username" label="姓名" width="120">
        </el-table-column>

        <el-table-column prop="mobilenumber" label="手机号" width="120">
        </el-table-column>

        <el-table-column prop="userid" label="员工编号" show-overflow-tooltip>
        </el-table-column>

        <el-table-column prop="technology" label="工序" width="200">
        </el-table-column>

        <el-table-column prop="b" label="操作" show-overflow-tooltip>
          <template scope="scope">
            <el-button size="small" @click="handleEdit(scope.$index, scope.row)">编辑</el-button>
            <el-button size="small" type="danger" @click="handleDelete(scope.$index, scope.row)">删除</el-button>
          </template>
        </el-table-column>
    </el-table>
  

     <el-dialog title="收货地址" :visible.sync="dialogFormVisible">
      <el-form :model="form">
        <el-form-item label="姓名" :label-width="formLabelWidth">
          <el-input v-model="form.name" auto-complete="off"></el-input>
        </el-form-item>
        <el-form-item label="手机" :label-width="formLabelWidth">
          <el-input v-model="form.name" auto-complete="off"></el-input>
        </el-form-item>
        <el-form-item label="负责工序" :label-width="formLabelWidth">
      <el-checkbox-group v-model="checkedCities1">
      <div class="a">
        <el-checkbox v-for="city in cities" :label="city" :key="city" style="display:block;">{{city}}</el-checkbox>
      </div>
        
      </el-checkbox-group>
        </el-form-item>
      </el-form>
      <div slot="footer" class="dialog-footer" >
        <el-button @click="dialogFormVisible = false">取 消</el-button>
        <el-button type="primary" @click="dialogFormVisible = false">确 定</el-button>
      </div>
    </el-dialog>
  </div>
</template>

<script>
 import request from '../../api/request.js'
 

  export default {
 
    data() {
      return {
        tableData3: [{
          employeeid: '1',
          username: '王小虎',
          mobilenumber:'18818478640',
          userid: '11213212',
          technology: 'dsauhygdusayhgduysa'
        },
        {
          employeeid: '1',
          username: '王小虎',
          mobilenumber:'18818478640',
          userid: '11213212',
          technology: 'dsauhygdusayhgduysa'
        }],
        multipleSelection: [],
        inputVal: 'aaaaaa',
        input: '',
        dialogTableVisible: false,
        dialogFormVisible: false,
        form: {
          name: '',
          region: '',
          date1: '',
          date2: '',
          delivery: false,
          type: [],
          resource: '',
          desc: ''
        },
        formLabelWidth: '120px',
        checkedCities1: ['上海', '北京'],
        cities:  ['上海', '北京', '广州', '深圳']
      }
    },
    created(){
      this.fetchData()
    }, 
    watch: {
       '$rotue': 'fetchData'
    },
    methods: {
      fetchData(){
        request.user.query().then(res => {
         console.log(res)
          res.data.data[0].technology = ["我","你"]
         res = res.data.data

         for(let i=0;i<res.length;i++){
           res[i].technology = res[i].technology.join(",");
         }
          this.tableData3  = res
       })
      },
      Search(){
        console.log("我是查询")
      
      },
      Add(){
        console.log("新增")
         const h = this.$createElement;
          this.$msgbox({
          title: '消息',
          message: h('div', null, [
          h('div',{ style: 'margin-bottom: 10px' },[
              h('span', null, '姓名：'),
              h('input',null, ""),
            ]),
            h('div',null,[
              h('span', null, '手机：'),
              h('input',null, ""),
            ]),
            h('div',null,[
               h('span', null, '负责工序：'),
               h('textarea',null, ""),
            ]),
           
            h('i', { style: 'color: teal' }, 'VNode')
          ]),
          showCancelButton: true,
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          beforeClose: (action, instance, done) => {
            if (action === 'confirm') {
              instance.confirmButtonLoading = true;
              instance.confirmButtonText = '执行中...';
              setTimeout(() => {
                done();
                setTimeout(() => {
                  instance.confirmButtonLoading = false;
                }, 300);
              }, 3000);
            } else {
              done();
            }
          }
        }).then(action => {
          this.$message({
            type: 'success',
            message: 'action: ' + action
          });
        });
      },
      handleSelectionChange(val) {
        this.multipleSelection = val;
      },
      SearchIconClick() {
        console.log(1111)
      },
      handleEdit(index, row) {
        console.log(index, row);
      },
      handleDelete(index, row) {
        console.log(index, row);
      }
    }
  }
</script>

<style lang='stylus'>
.el-message-box__btns
  text-align: center;

.el-form .el-input
  width: 130px;

.a 
 height:140px; 
 border:1px solid #ccc;
   
</style>